// Code generated by go-bindata.
// sources:
// data/favicon.ico
// data/footer.html
// data/header.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x74\x1b\xd5\x99\x9f\x90\x40\x79\x6d\x37\xcd\xd2\x76\xd9\x72\x58\x4e\x77\x97\x4d\x17\x68\x02\x67\x5b\xd8\x3d\xf4\x9c\x42\x29\x71\x52\x58\x42\x96\x47\x0b\x85\xdd\x73\x76\xa1\x34\x25\xdd\xd0\x84\x26\x85\x82\x68\x4a\xd6\x4d\xd2\x34\x09\x24\xd6\xc8\x24\x98\xd8\x96\x34\xf7\xda\x8e\x83\x34\x23\x3b\x7e\xc4\x8f\xd8\x4e\x2c\x8d\x6d\x59\xf2\xc8\x2f\xc9\x76\x24\xcd\x8c\x6c\x48\x79\x64\x21\x69\x12\xcf\xb7\xe7\x8e\x35\xca\x48\xd6\xe8\x61\x6c\x9c\x3f\x7a\xcf\xf9\x4e\xe4\x7b\xbf\xef\xfb\xfd\xe6\xce\xbd\xdf\xbd\x73\xbf\x1b\x8a\x5a\x40\x2d\xa4\x16\x2f\x26\xff\xde\x44\x3d\xb7\x88\xa2\xbe\x4d\x51\xd4\x4d\x37\x4d\xfd\xbd\xf4\x4b\x14\xf5\xf6\x22\x8a\x5a\xbe\x3c\xde\x7e\x33\x45\x75\x7c\x99\xa2\x96\x52\x14\xb5\x98\xe8\x51\x53\xf5\x99\x0a\x42\xe1\x25\x0c\x23\xee\x44\x48\x1a\x46\x48\x3a\x8f\xb1\x04\xe9\x84\xb4\x21\x24\x06\xa7\x74\xc3\x4b\x88\x6d\x69\xa9\x7c\x0d\x42\x62\xc0\xc8\xc6\x48\x18\x26\xda\x1f\xb7\x7d\x26\x5f\x5b\x4d\xec\xf6\xc8\xb3\x0c\x23\x6e\xd7\xfe\x2e\x7a\x2b\x04\x1b\xb6\xf4\x18\xea\x93\x36\xa2\xa3\x7b\x9e\xed\x0c\x23\xae\xd7\xfe\xde\xb2\x53\x80\x27\x5e\x68\x37\xb4\x27\x6d\x44\xe7\x62\x5d\x6c\xfd\xc1\x83\xe2\x8d\x08\x89\x67\xc9\xdf\xc5\x6f\x8f\xc2\xcb\xbf\xf3\x19\xda\x93\x36\xa2\x33\x85\x4d\x6c\xc4\x1b\x49\x1f\x56\x56\x46\x37\x60\x2c\xe6\xf1\xec\x22\x10\x1b\x62\xcb\x22\xf3\x63\x7e\x77\xc3\x83\x5d\x27\xfc\xc0\x39\x47\xa1\xa2\x42\x84\x29\x5f\xd3\x85\xb4\x11\x1d\xa2\xdb\xd3\xd9\xf0\xb0\xc3\x5e\xf4\x04\x87\xe8\x4f\x1a\x9d\x65\x4a\x28\xc0\x83\x26\xbd\x9e\x16\x18\xf2\x77\x26\xfe\x26\xbf\x49\x9d\x5e\xa7\xd1\x59\x0e\x2c\xa2\x3f\xe2\xb0\xc5\x4f\x7e\x6b\xf5\x3e\x4f\x2b\xdc\x71\xfb\x6d\xb0\x69\xc3\xba\x44\xdd\x2f\x37\xae\x53\xeb\x48\x9b\xde\x9e\x43\x74\x0f\x8b\xe9\xdd\x8d\xce\xb2\x44\xbd\xfb\x58\x1d\xdc\x72\xcb\x3f\xc2\x4f\x9e\xf9\x8f\x44\x1d\xf9\x4d\xea\xdc\x6d\x75\xc9\xf6\x98\xde\xc1\x5a\x8b\xbe\x5e\x57\x5d\xf2\x7f\xc1\x78\x7d\x50\xf0\xc0\x8e\xc2\xd7\x80\x3b\x6c\x4f\xe8\x92\xdf\xa4\x8e\xb4\xa9\x3a\x01\x1e\x8e\xbc\x7b\xf0\x63\x07\xb6\xa8\xfd\xcf\x8d\x9d\xe6\x84\x41\x21\xe9\xf9\x32\x09\xd1\x75\x45\xff\x74\x02\x63\x58\x58\x33\x01\xdf\xe1\x64\x45\x69\x8c\x9c\x86\xe1\x40\xd7\x64\x36\xdb\xe1\x40\xd7\xf9\xc6\xc8\x69\xc5\x15\x03\xe0\x24\x78\xda\x15\x83\x37\x39\x19\x26\x5d\x31\x58\x3f\x2a\xb8\x6f\x0f\x05\x3c\x8d\xa1\x00\x7f\x21\x8d\xed\x85\xa0\xe0\x39\x3a\x24\xb8\x6f\x67\x27\xe0\x31\x2e\xa6\x9c\xe1\x64\x85\x73\xc9\xb0\xce\x19\x83\x27\xf5\xf3\xb9\xaf\xaf\xe9\xda\xf0\x60\xcf\xd7\x86\x7a\x4f\xdc\x40\x84\xfc\x26\x75\x7a\x9d\x9a\x18\xdc\xc7\xc9\xca\xeb\x19\x03\x43\x0e\x65\x69\x3c\xc6\x7c\x37\x87\x38\xa3\x2f\x16\x0b\x5c\x6e\xb7\x47\xd6\x54\x54\x48\x6f\x23\x24\xf9\x11\x12\x4f\x23\x24\x2a\xf9\xc6\x00\x62\x13\xb7\xed\x43\x48\x2c\xb1\xdb\xa5\x35\xc4\x77\x26\x6c\xbb\x3d\xb2\x12\x63\x71\x64\xa6\x71\x27\x87\xf9\x39\x62\xb7\x4b\x2b\xd3\x61\x93\x78\x87\x90\x38\x39\x77\xd8\x89\x7e\x99\x24\xf1\x51\x8f\x6d\xb3\x45\xbe\x89\x90\x78\x6e\xae\xb1\x75\x1c\xce\x31\x4c\x64\x99\x86\xcf\x30\x51\xdb\xe7\x85\xad\xe3\x60\x27\xd8\x00\xb0\x00\x63\xe9\x8f\xf3\x80\xff\x81\xc9\x64\xba\xcc\x6a\x15\xaf\x33\x1a\xdf\x96\x03\x23\xf0\xd3\x97\x3d\x50\x52\x7a\x32\x6f\xff\xc4\x86\xd8\x12\x1f\x06\xf8\x0a\x42\xd2\x97\x6d\xb6\xd8\x57\x8d\x7c\x3c\xff\x0a\x0f\x0f\xfd\xb4\x05\x5e\x7c\xdd\x9b\x37\xfe\x8b\x5b\xbd\xaa\xed\xcf\x5e\xe1\x33\xe8\x8d\xff\xb5\xc5\xc2\x5f\x8e\xb1\x74\x26\x5d\x3b\x59\x57\x89\x8f\xff\xde\xdc\x99\x37\xfe\x33\x9b\x3b\x55\x5b\xa3\x75\x1b\x21\xe9\xac\x16\x0f\x10\x92\xda\xd3\xe9\xfc\xf8\x17\x1d\xaa\x8f\x67\x5f\x72\xe7\x8d\xff\x93\x97\xdc\xaa\x2d\xf1\x61\x80\xdf\x71\x71\xfc\x8b\xeb\xd2\xe9\x90\x7d\x09\xf1\xf1\xeb\x6d\xfe\xbc\xf1\x5f\xd9\xe6\x57\x6d\x7f\x61\xb0\xef\x41\x48\xfc\xb9\x86\x3f\xb5\xdf\x92\x22\xa9\x3a\xa5\xe5\x61\xd5\x8f\xd5\x16\xcd\x1b\xdf\x6a\x8f\xaa\xb6\xc4\x47\x1a\xec\x28\xc1\xd4\xc7\x20\x8c\xa5\x02\x84\xc4\x0b\xf9\xe2\xe4\x2b\x04\xc3\x28\x06\xd7\xba\x46\xb7\xe5\xb7\xdf\xca\x57\x44\x70\x71\xa1\xed\x46\xeb\x4f\x30\xc0\xaf\xef\xe9\xf4\xc1\xe1\xea\xe9\x7d\xf6\x59\x85\xf8\xec\xee\xf4\x41\x28\xe0\x79\x41\x8f\xc9\x22\xda\x4d\xf6\x5a\x2e\x86\x7e\x70\xd8\x77\xe2\x57\xea\x5e\xa4\x8f\x07\x77\x7b\x1f\xd4\xba\x42\x70\xe8\x50\xc4\x70\xdf\x98\x4d\x88\x2d\xf1\xd1\xd9\xde\xa7\xfa\x24\xbe\x07\xbc\x1d\x26\x87\x9d\x7e\x9c\x65\xe8\x62\x16\xd1\xdd\x2c\xa2\x3f\xe5\xb0\x05\x88\x74\x34\x1c\x52\x72\xdd\x6b\xcd\x54\x3a\x1a\xab\x41\xc3\x73\x22\xfa\x8f\x2c\xa2\xc3\x09\xfc\xc6\x6a\x43\xbb\x40\x4f\x3b\xd4\x38\x10\xf8\xf9\x63\x86\x3a\x7e\xbe\x55\xd5\x09\xf4\x74\xe4\x84\xcf\x62\x7a\x90\x45\xe6\x96\x6c\xf8\x03\xbd\xc7\x61\xc5\xfd\xf7\xa8\x7b\xdd\xef\xdc\x7d\x27\x78\x3b\x9b\xa7\xe9\xf4\x74\x36\xc1\xdd\x77\xdf\xa9\xea\x14\xdc\x7f\xaf\x6a\x93\x15\x1f\xd1\xb5\x2c\x2e\xde\x9d\x0d\xbf\xd6\x81\x55\xbf\x9a\x94\x97\x98\xa7\xe9\x58\xdf\xa1\x93\x74\x6a\x1d\x28\x2b\x3e\x87\x2d\x85\xac\xdd\xfc\x50\x36\x7c\xae\xda\x9e\xe4\xfb\x9d\xfd\x7b\xa7\xe9\x94\x1e\xd8\x97\xa4\xc3\x56\xdb\x72\xc0\x37\x7f\xbf\xa9\xa4\xe4\x4a\x16\xd1\xa7\xe2\xe3\x2f\xad\x4d\x1d\x5b\x91\xe4\xdb\x5e\x5a\x3c\x4d\xc7\x56\x6a\x49\xd2\xa9\xe7\x2a\xd3\xe3\x37\x54\x6b\x7d\x2f\x59\x2c\x16\x75\xfd\x71\x22\xf3\x6b\xa4\xae\xf5\x08\x4e\xff\x6d\xd0\xe7\x86\x1f\x3e\xb6\x5a\xf5\xbb\x6a\xe5\x7d\x20\x74\xb7\x4d\xd3\xe9\xeb\x6e\x53\xdb\x88\x0e\xd1\x25\x36\xe9\x7c\x1d\x3b\x82\x35\xfc\x17\xb5\x18\xe0\xb0\x58\xae\x66\x19\x5a\xa8\x77\x94\x43\xd0\x60\xdc\x92\x6f\xa4\xae\xe3\x47\x0d\xfd\x6a\x3c\xbb\x8f\x1f\x4d\x7c\x4f\x4d\xf3\x11\xe0\xa1\xbe\x06\x93\x71\xcf\x63\x6c\xba\x42\x1f\x87\x9c\x8d\xb5\xcb\xb8\xe1\xf7\x26\x03\x03\xfe\x39\x9b\xfb\xc4\x37\x17\x39\xa3\xb0\xde\xe1\x82\xd4\xd8\xcb\xc9\x80\xc9\xb7\x57\xdb\xd8\xc4\x9c\xe1\x13\xdf\x04\xc3\x25\x2b\xa1\xa6\x71\xb8\x56\x87\x7d\x2f\xf9\x56\x8c\xb7\x81\x6f\x70\x60\xd6\xb1\x89\x4f\xe2\x5b\xc5\x20\x32\x0e\x5b\x12\xf8\x31\x85\x4b\xd4\xc7\x00\x8e\x48\xe7\xa0\x7f\xc0\xf7\xa7\xd9\xc2\x1e\xe8\xef\xfd\xf0\x88\x78\x4e\xd1\x63\x70\x31\xe5\x14\x0a\x2b\x57\xb1\x27\xe1\x4b\x5c\x0c\xce\x25\xea\x65\xe5\x3c\x27\x2b\xbf\x0c\x06\xbd\x5f\x09\x05\xf8\xc3\x41\xc1\x33\xe3\x35\x81\xd8\x06\x05\xcf\xbb\x81\x40\xe7\x5f\xb9\x26\x60\x15\x17\x53\xde\xd3\x73\x60\x63\xf0\x10\x1b\x83\xfb\x74\x9c\xce\x72\x31\x58\xad\x1f\x17\x23\x7e\x7e\x45\x50\xf0\x38\x83\x82\xe7\xd3\x3c\x70\x3f\x0d\x0a\x1e\x76\xa4\x9f\x5f\x91\x34\xc6\x26\xe0\x66\x2e\xa6\x84\x2f\xe2\x41\xa1\x4b\x86\x07\xe3\xd8\x9f\x92\xdf\x46\x7b\x83\xa1\xa1\xa1\x2f\x0c\xfa\xbb\xbe\x31\x22\xf0\x77\x8e\x06\xf8\xbb\xd2\x09\x69\x23\x3a\x44\xd7\xc8\x8f\x6b\x1c\xfe\x8e\x8b\xc1\xc8\xd4\x58\x83\xdd\x16\x1e\x2e\x77\xc5\xe0\xd9\xc3\x12\xfc\x93\x91\xcd\x6c\x97\xda\xb0\xb2\xc4\x35\xae\xac\xad\x99\x50\xae\xff\xbc\x30\x2f\xd5\xb2\x94\xa2\xa8\xe5\x14\x45\xfd\x67\x9e\xe7\x24\xfa\xb2\x7f\x7f\xff\x5f\x60\x1c\xfe\x7b\x86\x11\x57\x23\x24\xbd\xc1\x30\xd1\x63\x08\x89\x22\xf9\xc6\x99\xc9\xd9\x49\x86\xbd\xb3\x12\xf7\x29\x21\x24\xb6\x13\x2c\x9b\x2d\xf2\x88\xd5\x1a\xf9\x07\xc2\x21\x5f\xde\xe4\xdb\xcf\x6e\x8f\x3e\x80\x90\x58\x82\x90\x38\x36\x9b\x5c\xf3\x7b\x26\x31\x82\x90\x54\x42\xfa\x2f\xdb\x19\x91\x56\xca\xca\xc6\xae\x47\x48\xb2\x63\x2c\x7d\x34\x1f\xbc\x0d\x9e\xe3\x63\x84\xe4\xc3\x55\x55\x63\x19\xe7\x55\x55\xd5\xc4\xf5\x18\xcb\x1c\xc6\x73\x7f\xde\x34\xc3\xe7\x70\xd9\xed\x72\xda\xc9\x60\xb1\xf0\x57\x33\x4c\xd4\x7a\x29\x72\xbf\x28\xe2\x24\x42\x62\x65\xea\x37\x2e\xa5\x9e\x31\x4a\x1b\x11\x92\xe6\xfc\x3b\x77\x16\xde\xc3\x24\x42\xd2\xab\xa9\x63\x9e\x61\x44\x61\xbe\xb9\xe5\xfe\x0c\x52\xd8\x66\x3b\xf9\x37\x1a\x7f\x8c\xc5\x87\x11\x92\x4e\xcd\x37\xaf\x3c\xde\xc1\xe9\x8a\x0a\x69\x8d\xc6\x1f\x21\xf1\xa5\x4c\x79\xb8\x4b\x4d\xa6\xce\x9a\xa5\x97\x29\x0a\x16\x98\x4c\xb0\x08\x63\x69\x77\xb6\x58\x89\x90\x08\x07\x0e\x8e\xc1\xa6\xad\x5e\xd8\x55\x34\x04\x0c\x33\x7b\xe7\x31\x0c\x12\x55\x9f\x9b\xb6\xf6\xc2\xfe\x77\xc6\x54\xac\x2c\x5c\x14\x86\x91\xf6\x60\x0c\x57\x60\xdc\x77\x05\x42\x32\x9d\x0d\xc3\x6a\x8b\xa8\xe7\xae\xda\xd9\xdf\x5b\x25\x63\xb3\xc6\xbf\xa4\xf4\x64\xe2\x4c\xf2\x99\xcd\x9d\x2a\x56\x0e\xef\xc0\x82\x50\xf8\x2a\xb2\xd6\x22\x24\xee\xcb\xa6\xbf\xb7\x38\x08\x8f\xff\x4f\x9b\x8a\x41\x64\xeb\xae\xc0\xac\xf1\xdf\xf6\xe6\x40\xc2\xef\x23\xeb\x8e\xc1\x9b\x96\x60\xf6\x77\xc6\x88\x45\x25\x25\xa3\x57\x02\xc0\x02\x84\xc4\xdf\x66\x8b\xfb\xdb\xde\x18\x80\x7f\x7f\xbe\x35\x81\xb3\xf1\xb7\xc6\x79\xdf\x7c\x65\x53\xfc\x4c\x9b\xc8\x9a\x9f\xb5\xc2\xef\xde\x18\xc8\x3a\x7e\x10\x12\x5f\xc7\x18\x2f\xa4\x12\x39\x1e\xe9\x93\x4c\x36\x85\x7b\xfa\x55\xdf\x1a\xce\xfa\xd7\xba\x67\x8d\xbf\x76\x9e\x4c\xe4\xe1\xb5\x2d\x50\xb8\xbb\x3f\x0b\x7f\xe9\x2c\xc6\x52\x22\x57\xc4\x30\xb1\xbb\x10\x92\xa2\x99\x6c\x7e\xbf\x77\x50\x7d\xb7\x1a\xce\xe6\xc2\xde\x59\xe3\xff\xca\x36\x5f\x52\xff\xef\xd8\x3b\x98\x8d\xff\x29\x8c\x63\xff\x72\x31\x7e\x86\xaf\xc2\x58\x6c\xce\x64\x53\xfc\xf6\x28\x3c\x19\xcf\x3b\xac\x5e\xdb\x02\x7f\x28\x1a\x9a\x35\xfe\x64\xbc\x13\x9f\xc4\xf7\xe3\x3f\x6f\x4b\xe4\xfc\x33\xf0\xef\x26\x9c\xf5\x6b\x30\xc3\xc8\x8f\x66\xca\x13\x92\x78\xf9\xab\xc2\x5e\x15\xe7\xb9\x97\xdc\x70\xb0\x6c\xf6\xce\x92\xcb\xad\x11\x78\xee\x65\xb7\xea\xfb\xc5\xd7\xbd\x19\x63\x33\xe1\xc8\x30\x91\xa7\x53\xf7\x3f\x64\x1d\x40\x28\x7a\x28\x13\x8e\xcd\x1e\x55\xfb\xa6\xb4\x3c\x9c\x35\x46\xe7\x23\xc4\x17\xf1\x49\x7c\x13\x8c\x2c\xba\x1c\x89\x99\xe9\xf6\xa0\x56\xeb\xc9\xaf\x23\x24\x86\x2e\x85\x7d\x7f\x1a\xde\x0a\xc6\xe2\x88\xcd\x16\xf9\xa6\xd1\xfe\x9f\xc4\x23\x8c\xa5\xa7\x10\x8a\xbe\x37\xdf\x7c\xd3\xf0\xff\x88\x61\xa4\xa7\x8d\xfa\x5e\x2b\x4d\x4d\xb0\xa8\xbd\x25\x50\x5f\x51\x91\x7f\x6e\x6a\xae\x84\x70\x69\x6b\x11\xdc\x84\x5b\x26\xee\x5a\x09\x05\x78\x57\xaf\xc7\x0b\xac\x63\x0c\xe6\x36\xef\x94\x4d\x44\x70\x3a\xc6\xa0\xc7\xdd\x0b\x21\xc1\xd3\x91\x8e\x2b\xcb\x58\x1e\x75\x32\xe6\x65\x0e\x87\xe5\x6a\x3d\xff\xa0\xc0\x83\xd0\xd3\x03\xc7\x9a\xfb\x81\x75\x8c\x42\x45\x22\xff\x33\xf7\x9c\x2b\xe2\xbc\x5b\x9b\x06\x54\x0e\x84\x8b\x9e\x7f\x75\xc9\xae\xc5\x2e\xa6\xf8\x2e\x16\x99\x7f\xc4\x22\xfa\x34\x8b\xe8\x09\x27\x32\x07\x59\xc6\xfc\x8e\xa3\x82\xfe\xde\x70\x9f\xbb\xe1\xe2\x99\x1d\x0f\x83\xbe\x2e\xb5\x0f\x9a\x1b\x06\xc1\xe9\x18\x85\xaa\x4a\xb2\xbf\x8a\xce\x38\xff\x95\x4e\x88\x4f\xe2\xfb\x68\xfd\xa0\x8a\x35\xe0\xeb\x9a\xe2\x9d\xe0\xe1\xe6\x9d\xd8\xfc\x08\x8b\xe8\x4a\x96\x31\x9f\x64\x11\x7d\x8a\x45\x96\x71\x0e\x59\x4e\xeb\xf2\x26\xc0\x22\x5a\xe9\xed\x6c\xc8\x7a\xaf\xe8\xf3\x16\x3f\xdf\xac\xcf\xef\xc4\xb9\x9a\x25\x0e\xd1\x63\xa9\xf5\xbd\x27\x1a\xe6\x9d\x6f\x2e\xfc\x9d\x0c\x2d\xb0\x88\x6e\x9b\x29\xff\x41\xdf\x09\x70\x54\x96\x43\xf1\xbe\x3f\x40\x73\xdd\xbb\x86\xf9\x91\x94\x33\x64\x68\xa9\x77\x40\xf1\xbe\x9d\xe0\xa8\xb2\x1a\xe6\xf3\x72\xe4\x5f\xc7\x32\xe6\x03\x33\xe1\x3f\xe4\xef\x84\x4d\x1b\xd7\x25\xf2\x5a\x77\xdc\x71\x1b\xec\x37\xef\xca\x9a\x07\x7a\xcb\xbc\x0b\xbe\xf5\xad\xe5\xaa\xcd\xad\xb7\x2e\x85\x0d\xeb\xd7\x26\xdd\x1d\xcc\x73\xfc\x14\x39\x91\xf9\xf9\x99\xf0\xaf\x63\x2b\xe0\xb6\xdb\xbe\x91\x94\x9b\xfb\xf1\x13\x8f\xaa\x79\x2a\x63\x0e\xad\xaa\x8e\xde\x86\xf8\xa8\x31\xc8\x69\x66\xe2\x4f\xe6\xa9\x03\xed\x7b\xce\x59\x65\x5e\xc6\x22\xcb\xf9\x7c\xf9\x1f\xa0\xf7\x24\xf1\x50\xf3\xbb\x2b\xee\x85\x8e\xe6\x1a\x43\x1b\xf2\x6c\x2b\x0b\xbe\x37\xcd\xce\xfc\xe6\x8e\xfc\xf9\x63\xfa\x0c\x67\xa3\xff\xf9\x48\x55\xd1\x57\x38\x64\x19\xca\x97\x3f\x19\x2b\xa9\x3c\x56\xdc\x7f\x4f\x76\xfe\x2b\xee\x9d\x66\x57\xb4\x67\xfb\x4c\xfa\xbf\xd7\x81\x2d\x37\x22\xb4\xf3\x2a\x16\xd1\x56\xf2\x3e\x3e\x2b\xff\x82\x1c\xf8\x17\xa4\xe3\xff\x46\x0e\xfc\x3d\xcd\x49\x63\x87\x45\xf4\x5b\xa5\xa5\x3b\xd4\x73\x44\x16\x9b\xff\x8b\xd5\xad\x03\xde\x1c\xf8\x63\xeb\x81\x69\x3c\xd6\xac\xfe\x41\xd2\x9d\xd9\x54\xf1\x76\x36\xc3\xc3\xab\x57\x4d\xb3\x43\xe5\xfb\xb3\xe2\xf9\xdc\x47\xf5\xfc\x3f\x21\x6b\xaf\xb6\x1e\x57\x95\xed\xb9\x81\x45\x74\xb7\xd6\xce\xb7\x19\xf7\xa1\x26\xfd\xde\x0e\xf8\xb7\x07\x0a\x12\x73\x78\xd9\xb2\x5b\x60\x8b\x69\x73\xc6\x78\x48\xe2\xed\x6f\x5e\xdd\x04\xb7\x2f\xbf\x35\x31\x77\x1f\xf8\xc1\xf7\x55\x5f\xd9\xf0\x7a\x3a\x8e\xe8\xc6\x0f\xed\x77\x58\x2d\xd7\xe9\xf7\x41\x0e\x7b\xd1\x53\x2c\xb2\x9c\x9b\xba\xaf\x90\xfe\xbe\x40\xaa\xb4\xd6\x3b\x61\xcb\xab\x9b\x60\xc3\x0b\x6b\x61\xe7\xb6\x2d\xc0\x77\x64\x7f\x6f\x44\x67\xf7\xef\xb7\xc2\xc6\x17\xd6\xaa\xb6\x47\x6b\x8d\xef\xa6\xe8\xe5\xf8\xd1\xc3\x5a\xdf\x9f\x21\xfb\x88\xd4\x7d\x9c\xc9\x64\x5a\xc4\xda\xe9\xff\x25\x63\xab\xbe\xa6\xc2\x30\xdf\xaf\x17\xb2\x16\x91\x98\x3e\xe0\x3b\x91\xd3\xda\xa5\xb7\x23\xef\x82\xd8\xe6\xb4\xe6\x05\x78\x68\x68\x6b\x06\x16\x5b\x26\x59\xa6\xe8\xd7\x60\x32\x5d\x96\x6e\x2f\xea\x2a\x2b\xfb\x22\xd7\x58\x57\xc3\x8d\x7c\xa8\xcc\xe5\x7d\x81\x7c\x25\xd0\xef\x03\x4e\x3c\xaf\x70\xde\x81\xfa\x77\x1b\x1a\xbe\x6a\xb4\xef\x77\x45\x94\x1b\x38\x59\x39\xce\xc9\x8a\xd2\x36\x36\x91\xd3\x3b\x98\x6b\x21\x1c\xda\x47\x63\xf1\xdc\xb8\xf2\x1e\x2b\xc1\x53\x46\xfc\x59\x59\xb1\xc6\xef\xa6\x43\xad\x74\x0e\xfa\x06\x03\xf3\xce\x9f\x70\xa8\x13\xcf\x26\xdd\x2f\xe0\x26\xe0\xe6\x69\x7d\x3f\x01\xab\x12\x77\x2d\xe2\xf7\x2d\xc8\x3b\x18\x0a\x74\xcf\x1b\xf7\xe1\x40\xd7\xd4\xdd\x10\xfd\xfd\x8c\x18\x00\x2b\x83\xcb\x35\x04\x89\x5c\xbe\xeb\x7d\xf8\x22\x27\x2b\x0d\x7a\x1d\x22\x35\xd2\x05\x70\x87\x4e\xce\xcb\x38\x22\x98\x7c\x70\x4c\xe5\x90\xca\x8b\x93\x95\x0f\x58\x19\xee\xd1\xf8\xd7\x8e\x43\x01\x17\x53\x26\x52\xf5\xb4\x67\xf0\x84\xc2\x1f\x05\x85\xb4\xff\xc7\x61\xae\xe4\x42\xf7\x70\x70\xd0\x25\x5d\x50\xd2\x71\x72\xc9\x30\xc9\x49\xca\x76\xdc\x07\x57\x98\x4c\x70\x19\x37\x0e\xaf\xb9\x64\xe5\x42\xca\x33\x2a\x64\xbe\x70\x31\x28\xec\x08\x87\x97\x84\x04\xcf\x6f\x42\x82\x67\xfc\xb3\xdc\x5b\xc9\xda\xe7\xc4\xb7\xc0\xbf\x3f\x2c\xf0\x5b\x64\xaf\xf7\x1a\x87\x08\xf7\xb3\xb2\xe2\xe3\x52\xb8\xc5\xf9\x1d\xab\x99\x50\xae\x2f\x95\x95\x6b\x58\x59\xa9\x4c\xd3\x2e\xbb\x62\xf0\xa4\x36\xce\x86\x86\x86\xbe\x10\xea\xef\x7a\x30\x24\x78\x0e\x85\x04\xfe\xe3\x59\xe7\x2f\xf0\x1f\x07\x05\x8f\x73\x34\xd0\xb5\x66\xb4\xa9\xe9\xca\x44\x4c\x19\x87\xe5\xac\x9c\x7c\x0f\x49\x9b\xc7\x35\x32\xdc\x52\xfb\xa1\xb2\x84\x95\x15\x4f\x0a\xf7\xf7\xab\xa3\xf0\xaf\x18\xc3\xc2\xd4\x79\x2e\xcb\xde\x6b\x42\x7d\x9e\x6f\x07\x05\xcf\xde\xa0\xe0\x89\x7e\xf6\x7b\x44\x6e\x29\xe8\x77\x17\x0f\x0a\xfc\x9d\xfd\x6d\x6d\x69\xef\x3a\x54\x8f\xc2\x62\x2e\x06\xf6\x94\x67\x98\x74\x4a\xb0\xca\x21\xc2\x75\xac\xa4\xf8\xb4\x31\xc3\xc9\x4a\xa8\x46\x86\xef\x1a\xc5\x58\x7d\x01\x80\x85\xa3\x03\xfc\xd2\xa0\xe0\x5e\x19\x0c\xb8\x7f\x18\xea\xe7\x9f\xcc\x45\x06\xfb\x3c\x3f\x0a\x0a\x9e\x55\xc4\x96\xe7\x33\x9f\xa7\x69\x05\x87\xe0\x2f\x39\x19\xaa\x38\x79\xea\x4e\x96\x3a\xbe\x25\x78\xc4\x21\xc2\xd5\x9c\x0c\xfb\xd4\xb8\x2a\x43\x73\x4d\x0c\xee\xc3\x30\xbd\xdf\x2f\x85\xc2\x4a\xca\xdf\xb2\x32\xec\xe6\x64\x45\xe4\x64\xc5\xeb\x8a\xdf\x6d\x6a\x1a\x87\x6b\x9d\xef\x2b\x5f\xab\xfe\x00\x16\x53\x00\x0b\xe6\x9b\x67\xa6\x42\xe6\x23\x99\xb7\x64\xdc\x98\x00\xd2\xee\x83\xfe\x5c\xfe\x5c\x72\x2d\xff\x1f\x00\x00\xff\xff\x3c\x2f\x47\x2c\x2e\x3c\x00\x00")

func dataFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataFaviconIco,
		"data/favicon.ico",
	)
}

func dataFaviconIco() (*asset, error) {
	bytes, err := dataFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/favicon.ico", size: 15406, mode: os.FileMode(420), modTime: time.Unix(1694896340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xcb\xcf\x2f\x49\x2d\xb2\xe3\x52\x50\xb0\xc9\x80\x50\x79\x89\x65\x20\x5a\x41\xc1\x26\x51\x21\xa3\x28\x35\xcd\x56\x49\x4f\xc9\x2e\xbd\xd4\x46\x3f\xd1\x4e\xa1\x06\x55\x42\x5f\xc9\x2e\x3d\x14\x24\x01\xd2\xa7\x0f\xd6\x68\xa3\x0f\x33\x11\x10\x00\x00\xff\xff\x2c\xa2\x53\xc2\x5b\x00\x00\x00")

func dataFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataFooterHtml,
		"data/footer.html",
	)
}

func dataFooterHtml() (*asset, error) {
	bytes, err := dataFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/footer.html", size: 91, mode: os.FileMode(420), modTime: time.Unix(1694525055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3d\x4e\xc0\x30\x0c\x46\x77\x4e\x61\x65\x26\xb4\x74\x42\x25\x61\xe4\x04\x70\x00\x93\x18\x6a\x29\x75\xaa\xc4\xea\x0f\x88\xbb\x23\x52\x10\x0c\x6c\x2c\xd6\x67\xfb\xe9\xc9\xb2\x9b\x08\xe3\xdd\x05\x80\x9b\x49\x11\xc2\x84\xa5\x92\x7a\xf3\xf8\x70\x6f\x6f\xcc\xcf\x42\x70\x26\x6f\x56\xa6\x6d\xc9\x45\x0d\x84\x2c\x4a\xa2\xde\x6c\x1c\x75\xf2\x91\x56\x0e\x64\x5b\x73\x09\x2c\xac\x8c\xc9\xd6\x80\x89\xfc\xf5\x55\x7f\x8a\xaa\x1e\x89\x3e\x13\xc0\x53\x8e\x07\xbc\xb5\x08\xf0\x9c\x45\x6d\xe5\x57\x1a\x61\xe8\x97\xfd\xb6\x8d\xdf\x5b\x5d\x0a\xfd\x89\x0d\xdf\x18\x80\xd2\xae\x16\x13\xbf\xc8\x08\x81\x44\xa9\xfc\x16\x08\xae\xff\x11\xb8\xee\xeb\x68\xd7\x9d\x8f\xfa\x08\x00\x00\xff\xff\x2d\x07\xaa\x76\x30\x01\x00\x00")

func dataHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataHeaderHtml,
		"data/header.html",
	)
}

func dataHeaderHtml() (*asset, error) {
	bytes, err := dataHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/header.html", size: 304, mode: os.FileMode(420), modTime: time.Unix(1694964145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/favicon.ico": dataFaviconIco,
	"data/footer.html": dataFooterHtml,
	"data/header.html": dataHeaderHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{dataFaviconIco, map[string]*bintree{}},
		"footer.html": &bintree{dataFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{dataHeaderHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

